(function(c){var b=PhpDebugBar.utils.makecsscls("phpdebugbar-widgets-");var a=PhpDebugBar.Widgets.SQLQueriesWidget=PhpDebugBar.Widget.extend({className:b("sqlqueries"),onFilterClick:function(e){c(e).toggleClass(b("excluded"));var d=[];this.$toolbar.find(b(".filter")+b(".excluded")).each(function(){d.push(this.rel)});this.$list.$el.find("li[connection="+c(e).attr("rel")+"]").toggle();this.set("exclude",d)},render:function(){this.$status=c("<div />").addClass(b("status")).appendTo(this.$el);this.$toolbar=c("<div></div>").addClass(b("toolbar")).appendTo(this.$el);var e=[],d=this;this.$list=new PhpDebugBar.Widgets.ListWidget({itemRenderer:function(f,i){c("<code />").addClass(b("sql")).html(PhpDebugBar.Widgets.highlight(i.sql,"sql")).appendTo(f);if(i.duration_str){c('<span title="Duration" />').addClass(b("duration")).text(i.duration_str).appendTo(f)}if(i.memory_str){c('<span title="Memory usage" />').addClass(b("memory")).text(i.memory_str).appendTo(f)}if(typeof(i.row_count)!="undefined"){c('<span title="Row count" />').addClass(b("row-count")).text(i.row_count).appendTo(f)}if(typeof(i.stmt_id)!="undefined"&&i.stmt_id){c('<span title="Prepared statement ID" />').addClass(b("stmt-id")).text(i.stmt_id).appendTo(f)}if(i.connection){c('<span title="Connection" />').addClass(b("database")).text(i.connection).appendTo(f);f.attr("connection",i.connection);if(c.inArray(i.connection,e)==-1){e.push(i.connection);c("<a />").addClass(b("filter")).text(i.connection).attr("rel",i.connection).on("click",function(){d.onFilterClick(this)}).appendTo(d.$toolbar);if(e.length>1){d.$toolbar.show();d.$list.$el.css("margin-bottom","20px")}}}if(typeof(i.is_success)!="undefined"&&!i.is_success){f.addClass(b("error"));f.append(c("<span />").addClass(b("error")).text("["+i.error_code+"] "+i.error_message))}if(i.params&&!c.isEmptyObject(i.params)){var h=c('<table><tr><th colspan="2">Params</th></tr></table>').addClass(b("params")).appendTo(f);for(var g in i.params){if(typeof i.params[g]!=="function"){h.append('<tr><td class="'+b("name")+'">'+g+'</td><td class="'+b("value")+'">'+i.params[g]+"</td></tr>")}}f.css("cursor","pointer").click(function(){if(h.is(":visible")){h.hide()}else{h.show()}})}}});this.$list.$el.appendTo(this.$el);this.bindAttr("data",function(j){this.$list.set("data",j.statements);this.$status.empty();for(var l={},k=0,g=0;g<j.statements.length;g++){var h=j.statements[g].sql;if(j.statements[g].params&&!c.isEmptyObject(j.statements[g].params)){h+=" {"+c.param(j.statements[g].params,false)+"}"}l[h]=l[h]||{keys:[]};l[h].keys.push(g)}for(var h in l){if(l[h].keys.length>1){k++;for(var g=0;g<l[h].keys.length;g++){this.$list.$el.find("."+b("list-item")).eq(l[h].keys[g]).addClass(b("sql-duplicate")).addClass(b("sql-duplicate-"+k))}}}var f=c("<span />").text(j.nb_statements+" statements were executed").appendTo(this.$status);if(j.nb_failed_statements){f.append(", "+j.nb_failed_statements+" of which failed")}if(k){f.append(", "+(j.nb_statements-k)+" of which were duplicated");f.append(", "+k+" unique")}if(j.accumulated_duration_str){this.$status.append(c('<span title="Accumulated duration" />').addClass(b("duration")).text(j.accumulated_duration_str))}if(j.memory_usage_str){this.$status.append(c('<span title="Memory usage" />').addClass(b("memory")).text(j.memory_usage_str))}})}})})(PhpDebugBar.$);